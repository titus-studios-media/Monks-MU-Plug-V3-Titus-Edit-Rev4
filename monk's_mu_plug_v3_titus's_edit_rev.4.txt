@name Monk's MU Plug V3 Titus's Edit Rev.4
@inputs [In DoNotWireIn]:array
@outputs Out:array Wired [DoNotWireOut VerifyR]:array
@persist RopeDist RopeWidth RopePos:vector MUModel:string RopeMat:string [O E]:entity GTable:gtable GCTable:table PressedE PressedR LinkStage BeingLinked Checking WonTourney 
@persist PlugMsgCancel EorRUnlink Unlinking [SocketMat]:string [SocketColor]:vector 
@trigger
@model models/titus's_propper_model_pack_2.4/propper/mu_plugs/mu_socket_27pin.mdl
entity():setAlpha(0)

if(first() | dupefinished()){
    
    #Works like a normal plug with wiring. Wire your In and Out. 
    #Press E on a plug with the crowbar out to start the linking process.
    #Click E on the other plug.
    
    #If the plugs /aren't parented/, the rope system will work.
    #Otherwise, no rope will show.
    
    SocketColor = vec(255,255,255) #Color of the socket
    SocketMat = "models/proppertextures/acrylic" #Material of the socket
       
    RopeDist = 80 #Within this distance, the MU plugs will show ropes. Set to 0 to never show ropes.
    RopeWidth = 2 #How "big" the rope is.
    RopeMat = "cable/cable" #Material to use.
    
    EorRUnlink = 0 #Whether or not E unlinks a connected plug. E is 1, R is 0.
    
    Mount = 0 #Mounting plate, or not.
    
    #holo init and entity init
    
    O = owner()
    E = entity()
    
    HoloTable = table(
    array(vec(0,0,0),ang(0,0,0),vec(1,1,1),"models/titus's_propper_model_pack_2.4/propper/mu_plugs/mu_socket_27pin.mdl",vec(0,9.7,-2.3))
    )  
    
    for(N=1, HoloTable:count()){
        if(E:model() == HoloTable[N,array][4,string]){
            local HTR = HoloTable[N,array]
            RopePos = HTR[5,vector]
            MUModel = HTR[4,string]   
        }
    }
    
    
    A = 1
    holoCreate(A)
    holoParent(A,E)
    holoColor(A,SocketColor)
    holoScale(A,vec(1))
    holoModel(A, MUModel)
    holoPos(A,E:toWorld(vec(0,0,0)))
    holoAng(A,E:toWorld(ang(0,0,0)))    
    holoEntity(A):setSubMaterial(1,SocketMat)
    
    A = 2
    holoCreate(A)
    holoParent(A,E)
    holoColor(A,vec(255))
    holoScale(A,vec(1))
    holoModel(A, "models/titus's_propper_model_pack_2.4/propper/mu_plugs/mu_plug_27pin.mdl")
    holoPos(A,E:toWorld(vec(0,0,0)))
    holoAng(A,E:toWorld(ang(0,0,0)))    
    holoEntity(A):setSubMaterial(1,"models/proppertextures/aluminum")

if(Mount){
    A = 3
    holoCreate(A)
    holoParent(A,E)
    holoColor(A,SocketColor)
    holoScale(A,vec(0.8,0.8,1))
    holoMaterial(A,"models/proppertextures/acrylic")
    holoModel(A, "models/ext/parts/ditchlight_mount.mdl")
    holoPos(A,E:toWorld(vec(0,-0.8,-7)))
    holoAng(A,E:toWorld(ang(0,180,0)))
} 
    
    
    #init
    
    runOnLast(1)
    VerifyR = array("mmuplug", RopePos, E)
    
    
    #send ID to gtable for ID tournament
    GTable = gTable("tourney")
    GTable[E:id(), number] = E:id()
    
    GCTable = GTable:toTable()
    
    if(GCTable:values():max()  == E:id()){
        WonTourney = 1
    }
    
    timer("tourneycheck",1000)
    
    #init functions
    
    function clearLink() {
    
        E:deleteWire("DoNotWireIn")
        
        local R = ioOutputEntities("DoNotWireOut")
        
        for(N=1, R:count()){
            R[N,entity]:deleteWire("DoNotWireIn")
            
            if(R[N,entity]:type() == "gmod_wire_plug"){
                R[N,entity]:deleteWire("In")
            }
        }
        
    }
    
}


#plug logic, sadly its the most simple part of the chip
if(~DoNotWireIn){
    Out = DoNotWireIn
}

if(~In){
    DoNotWireOut = In
}

#holo and Wired output logic
if(->DoNotWireIn){
    Wired = 1
    holoBodygroup(1,1,1)
    holoAlpha(2,255)
}
if(!->DoNotWireIn){
    Wired = 0
    holoBodygroup(1,1,0)
    holoAlpha(2,0)
}

#link part
if((O:weapon():type()=="weapon_crowbar") & !(O:inVehicle())) {
    
    interval(70)
    signalSetGroup("mmuplug")
    runOnSignal("compatlink",0,1)
    
    #simplifer variables
    if(changed(O:keyPressed("E")) & O:keyPressed("E")){PressedE = 1}else{PressedE = 0}
    
    if(changed(O:keyPressed("R")) & O:keyPressed("R")){PressedR = 1}else{PressedR = 0}
    
    if(EorRUnlink & Wired){ReadyEUnlink = 1}else{ReadyEUnlink=0}
    
    EH = owner():eyeTrace():entity()
    
    #being linked check
    if(changed(Wired) & Wired){
        BeingLinked = 1
        timer("resettimer", 100)
    }
    
    #reset link
    if(clk("resettimer")){
        BeingLinked = 0
    }
    
    #Cancelling, up here to prevent a link start with E unlinking
    if(((PressedR & !ReadyEUnlink) | (ReadyEUnlink & PressedE)) & EH == E & LinkStage == 0){
        hint("Plugs unlinked.", 5)
        O:soundPlay(3,0,"buttons/lever8.wav")
        E:constraintBreak("rope")
        clearLink()
        
        Unlinking = 1
        timer("unlinkreset",300)
    }
    
    if(clk("unlinkreset")){
        Unlinking = 0
    }
    
    if(PressedR & LinkStage>0){
        LinkStage = 0
        hint("Plug link cancelled.",5)
        O:soundPlay(4,0,"buttons/lever8.wav")
    }
    
    
    
    
    #start link process
    
    if(PressedE & EH == E & LinkStage == 0){
        timer("linkcheck", 70)
    }
    
    if(clk("linkcheck") & !BeingLinked & !Unlinking){
        LinkStage = 1
        hint("Select another MU plug with key E to link them together.", 5)
        O:soundPlay(1,0,"buttons/button16.wav")
    }
    
    
    #confirm plug through output
    if(PressedE & EH != E & EH:type() == "gmod_wire_expression2" & LinkStage == 1 & !ReadyEUnlink){
        E:createWire(EH,"DoNotWireIn","VerifyR")
    }
    
    #if data is confirmed, which means chips are compatible, link MU plugs
    if(DoNotWireIn[1,string] == "mmuplug"){
        
        stoptimer("badcheck")
        
        local Plug = DoNotWireIn[3,entity]
        local PlugRopePos = DoNotWireIn[2,vector]
        
        hint("Auth successful, MU plugs linked!",5)
        
        O:soundPlay(2,0,"buttons/button19.wav")
        
        clearLink()
        E:constraintBreak("rope")
        Plug:constraintBreak("rope")
        
        E:createWire(Plug,"DoNotWireIn","DoNotWireOut")
        Plug:createWire(E,"DoNotWireIn","DoNotWireOut")
        
        if(((Plug:pos() - E:pos()):length() < RopeDist) & !(E:parent():isValid())){
            enableConstraintUndo(0)
            rope(1,E,RopePos,Plug,PlugRopePos,105,RopeWidth,RopeMat,0)
        }
        
        LinkStage = 0
    }




    
    #backwards compatibilty with plugs
    
    #shuts off all other e2s hints
    if(signalClk("compatlink")){
        PlugMsgCancel = 1
        timer("compatlinkreset", 200)
    }
    
    if(clk("compatlinkreset")){
        PlugMsgCancel = 0
    }
    
    #waits to see if hints are shutoff
    if(PressedE & EH:type() == "gmod_wire_plug" & LinkStage == 0 & WonTourney){
        timer("compatlinkcheck",100)
    }
    
    if(clk("compatlinkcheck") & !PlugMsgCancel){
        hint("Start from the E2 MU plug, not from the Wire Plug.", 5)
        O:soundPlay(6,0,"buttons/button7.wav")
    }
    
    #actual linker and hint supressor
    if(PressedE & EH:type() == "gmod_wire_plug" & LinkStage == 1){
        
        signalSend("compatlink",0)
        
        clearLink()
        
        hint("Old plug detected, MU plug linked!", 5)
        O:soundPlay(2,0,"buttons/button19.wav")
        
        E:constraintBreak("rope")
        EH:constraintBreak("rope")
        
        E:createWire(EH,"DoNotWireIn","Out")
        EH:createWire(E,"In","DoNotWireOut")
        
        if(((EH:pos() - E:pos()):length() < RopeDist) & !(E:parent():isValid())){
            enableConstraintUndo(0)
            rope(1,E,RopePos,EH,vec(12,0,0),110,RopeWidth,RopeMat,0)
        }
        
        LinkStage = 0
    }
    
    #removing links and cancelling
    
    if(PressedR & EH:type() == "gmod_wire_plug" & LinkStage == 0 & WonTourney){
        hint("Can't unlink Wire plugs! Unlink it from the E2 MU plug.", 5)
        O:soundPlay(6,0,"buttons/button7.wav")
    }
    
}else{

    interval(300)
    
    #switch away reset
    if(LinkStage>0){
        LinkStage = 0
        hint("Plug link cancelled.",5)
    }

}

#tournament so that only one e2 does hints on plugs
if(clk("tourneycheck")){
    
    GCTable = GTable:toTable()
    
    if(GCTable:values():max()  == E:id()){
        WonTourney = 1
    }else{
        WonTourney = 0
    }
    
    timer("tourneycheck",1000)

}

#remove self from global table
if(last()){
    GTable:removeNumber(E:id():toString())
}
